1 程序
	a 大量的if判空，读程序有时候可以忽略大量的if判空代码，if判空只是保证代码的健壮，我只需要看逻辑，做了什么
	b for:遍历处理对象属性，遍历对集合里的每一个对象，执行一个操作
	c 大量的获取数据，转化对象，从request请求，从数据库，处理两部分来源数据，封装，构建，组装新的对象数据，处理业务，保存数据库
	d 刨除，架构出扭转，关注对象，对象的属性，作用，方法，对象之间的关联
	e 有集合，需要操作集合里的对象，就需要遍历，需要操作具体对象的属性就需要判空，
		所有很多代码都是必须性的东西，没有任何业务逻辑，纠结太多就没有意思了
	f 大量的判空设置默认值
	g 少嵌套if层级,看着费劲，直接判错返回，少判断true进入处理	
2 表设计
	1 表与表之间关联关系
	2 很多时候就是表中一个字段，就是一种业务场景，存在多种，这时就需要，一张表来维护这种一对多的关系，或者是维护这个字段业务对象
	这种字段主表中无法存在，都是通过从表维护主表主键，建立一对多的关系，这种一对多的关系，就是这个业务字段
	3 次数字段：如果只维护主表中的次数字段是可以控制次数，但是每次使用的具体场景如何记录，这时也需要一张表来维护每一次的流水场景
	4 一个字段：需要包含多个场景，对象，状态时，都需要一张表，来维护这种场景变更，状态变化，对象具体属性
	5 只有每个多场景的业务字段，都有一张表来维护，才能支持任何场景，有时只有一种场景支持没有问题，但是无法扩展，表结构就局限了
	6 类型字段：因为类型并没有变化，没有维护变化记录需要，它本身就是一种既定的状态，除非每种类型变成一个业务主体才有必要
	
3 查询
	1 表设计对业务字段的附表维护，查询根据主键，每张表查询一次数据组装就可以，也比关联查询效率高，况且还有缓存和冗余字段
	需要哪个业务场景的字段，就查哪张表就可以，表的冗余字段支持一张表就可以基本查出所有的数据
	